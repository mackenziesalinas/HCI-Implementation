//code
// ignore_for_file: library_private_types_in_public_api

import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'dart:ui';
import 'package:flutter_countdown_timer/flutter_countdown_timer.dart';


void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      home: ActivityBeginPage(),
    );
  }
}

class ActivityBeginPage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Material(
      child: Container(
      decoration: BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topCenter,
          end: Alignment.bottomCenter,
          colors: [
            desaturateColor(const Color.fromARGB(255, 147, 205, 253), 0.5),
            desaturateColor(const Color.fromARGB(255, 144, 161, 255), 0.5),
            desaturateColor(Color.fromARGB(255, 253, 191, 241), 0.5),
            desaturateColor(Color.fromARGB(255, 255, 255, 255), 0.5),
          ],
          //stops: [0.25, 0.25, 0.25, 1.0],
        ),
      ),
      child: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center, // Center both vertically and horizontally
          children: <Widget>[
            Text(
              'Ready to Begin Your Activity?',
              style: GoogleFonts.playfairDisplay(
                fontSize: 35,
                fontWeight: FontWeight.normal,
                color: Colors.black,
              ),
              textAlign: TextAlign.center,
            ),
            SizedBox(height: 200),
            // ignore: sized_box_for_whitespace
            Container(
              width: 250.0,
              height: 50.0,
              child: ElevatedButton(
                onPressed: () {
                  // Navigate to the ActivityTimerPage
                  Navigator.push(
                    context,
                    MaterialPageRoute(builder: (context) => ActivityTimerPage()),
                  );
                },
                style: ElevatedButton.styleFrom(
                  primary: Color.fromARGB(255, 190, 190, 191),
                  onPrimary: Colors.black,
                  elevation: 30,
                  side: BorderSide(color: Color.fromARGB(255, 0, 5, 9)),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(10.0),
                  ),
                ),
                child: Text('START ACTIVITY'),
              ),
            ),
          ],
        ),
      ),
    ),);
  }
}

Color desaturateColor(Color color, double saturationFactor) {
  final HSLColor hslColor = HSLColor.fromColor(color);
  final double saturation = hslColor.saturation * saturationFactor;
  return hslColor.withSaturation(saturation).toColor();
}
class ActivityTimerPage extends StatefulWidget {
  @override
  _ActivityTimerPageState createState() => _ActivityTimerPageState();
}

class _ActivityTimerPageState extends State<ActivityTimerPage> {
  int _totalSeconds = 0;
  //double timeElapsed = _totalSeconds.toDouble();
  int _minutes = 0;
  int _seconds = 0;
  bool _isRunning = false;
  bool _isPaused = false;

@override
Widget build(BuildContext context) {
  double progressValue = _totalSeconds / (30 * 60); // Assuming you want a 30-minute countdown
  return Material(
  child: Container(
    decoration: BoxDecoration(
      gradient: LinearGradient(
        begin: Alignment.topCenter,
        end: Alignment.bottomCenter,
        colors: [
          desaturateColor(const Color.fromARGB(255, 147, 205, 253), 0.5),
          desaturateColor(const Color.fromARGB(255, 144, 161, 255), 0.5),
          desaturateColor(Color.fromARGB(255, 253, 191, 241), 0.5),
          desaturateColor(Color.fromARGB(255, 255, 255, 255), 0.5),
        ],
      ),
    ),
    child: Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: <Widget>[
          //SizedBox(height: 20), // Add space between the circle and the time
         SizedBox(
              width: 300.0, // Set the desired width
              height: 300.0, // Set the desired height
              child: Stack(
                children: [
                  Center(
                    child: Transform.scale(
                      scale: 5.0, // Increase this value to make the circular indicator larger
                      child: CircularProgressIndicator(
                        value: progressValue,
                        backgroundColor: Colors.white,
                        valueColor: AlwaysStoppedAnimation<Color>(Colors.black),
                        strokeWidth: 2.5, // Adjust the size of the circular timer (stroke width)
                      ),
                    ),
                  ),
                 // elevation: 20,
                  Center(
                    child: Text(
                      '${_formatTime(_minutes)}:${_formatTime(_seconds)}',
                      style: TextStyle(fontSize: 30, color: Colors.black),
                    ),
                  ),
                ],
              ),
            ),
          SizedBox(
              width: 100.0,
              height: 40.0,
              child: ElevatedButton(
              onPressed: () {
                if (!_isRunning) {
                  _startTimer();
                } else {
                  if (_isPaused) {
                    _resumeTimer();
                  } else {
                    _pauseTimer();
                  }
                }
              },
              style: ElevatedButton.styleFrom(
                  primary: Color.fromARGB(255, 190, 190, 191),
                  onPrimary: Colors.black,
                  elevation: 30,
                  side: BorderSide(color: Color.fromARGB(255, 0, 5, 9)),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(10.0),
                  ),
                ),
              child: Text(
                _isRunning
                    ? (_isPaused ? 'UN-PAUSE' : 'PAUSE')
                    : (_totalSeconds > 0 ? 'RESTART' : 'START'), // Change labels as requested
              ),
              ),
            ),
             SizedBox(height: 20),
            Container(
              width: 100.0, // Set the desired width
              height: 40.0,
              child: ElevatedButton(
              onPressed: () {
                // Navigate to the FinishedActivityPage
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => FinishedActivityPage()),
                );
              },
              style: ElevatedButton.styleFrom(
                  primary: Color.fromARGB(255, 190, 190, 191),
                  onPrimary: Colors.black,
                  elevation: 30,
                  side: BorderSide(color: Color.fromARGB(255, 0, 5, 9)),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(10.0),
                  ),
                ),
              child: Text('DONE'), // Change the button label to "Done"
            ),
            ),
            SizedBox(height: 20), // Add spacing
            Container(
                width: 100.0, // Set the desired width
                height: 40.0,  // Set the desired height
                child: ElevatedButton(
                  onPressed: () {
                    _startAgain(); // Start the timer from the beginning
                  },
                  style: ElevatedButton.styleFrom(
                    primary: Color.fromARGB(255, 190, 190, 191),
                    onPrimary: Colors.black,
                    elevation: 30,
                    side: BorderSide(color: Color.fromARGB(255, 0, 5, 9)),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(10.0),
                    ),
                  ),
                  child: Text('RE-START'),
                ),
              )
        ],
      ),
    ),
  ), );
}

  String _formatTime(int time) {
    return time < 10 ? '0$time' : '$time';
  }

  void _startTimer() {
    _isRunning = true;
    _timerCallback();
  }

  void _timerCallback() {
    Future.delayed(Duration(seconds: 1), () {
      if (_isRunning && !_isPaused) {
        setState(() {
          _totalSeconds++;
          _minutes = _totalSeconds ~/ 60;
          _seconds = _totalSeconds % 60;
        });
        _timerCallback();
      }
    });
  }

  void _pauseTimer() {
    _isPaused = true;
  }

  void _resumeTimer() {
    _isPaused = false;
    _timerCallback();
  }

  void _stopTimer() {
    setState(() {
      _isRunning = false;
      _isPaused = false;
      _totalSeconds = 0;
      _minutes = 0;
      _seconds = 0;
    });
  }

  void _startAgain() {
    setState(() {
      _isRunning = false;
      _isPaused = false;
      _totalSeconds = 0;
      _minutes = 0;
      _seconds = 0;
    });
  }
}

class FinishedActivityPage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Material(
    child: Container(
      decoration: BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topCenter,
          end: Alignment.bottomCenter,
          colors: [
            desaturateColor(const Color.fromARGB(255, 147, 205, 253), 0.5),
            desaturateColor(const Color.fromARGB(255, 144, 161, 255), 0.5),
            desaturateColor(Color.fromARGB(255, 253, 191, 241), 0.5),
            desaturateColor(Color.fromARGB(255, 255, 255, 255), 0.5),
          ],
          //stops: [0.25, 0.25, 0.25, 1.0],
        ),
      ),
      child: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center, // Center both vertically and horizontally
          children: <Widget>[
            Text(
              'Congratulations, you completed your activity!',
              style: GoogleFonts.playfairDisplay(
                fontSize: 35,
                fontWeight: FontWeight.normal,
                color: Colors.black,
              ),
              textAlign: TextAlign.center,
            ),
            SizedBox(height: 200),
            // ignore: sized_box_for_whitespace
            Container(
              width: 250.0,
              height: 50.0,
              child: ElevatedButton(
                onPressed: () {
                },
                style: ElevatedButton.styleFrom(
                  primary: Color.fromARGB(255, 190, 190, 191),
                  onPrimary: Colors.black,
                  elevation: 30,
                  side: BorderSide(color: Color.fromARGB(255, 0, 5, 9)),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(10.0),
                  ),
                ),
                child: Text('RETURN HOME'),
              ),
            ),
          ],
        ),
      ),
    ), );
  }
}
